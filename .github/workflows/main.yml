on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10name: Test
jobs:
  package:
    strategy:
      matrix:
        go-version: [1.14.x]
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go-version }}
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Get wails
      run: go get -u github.com/wailsapp/wails/cmd/wails
    - name: Build package osx
      run: |
        export PATH=${PATH}:`go env GOPATH`/bin
        echo "building on ${{ matrix.platform }}"
        mkdir -p ~/.wails
        cp wails.json ~/.wails/
        wails build -p
        ls
        echo "turning the .app into a .dmg"
        npm install -g appdmg
        appdmg dmg-spec.json Portfall.dmg
      if: matrix.platform == 'macos-latest'
    - name: Build package linux
      run: |
        sudo apt update && sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev
        export PATH=${PATH}:`go env GOPATH`/bin
        echo "building on ${{ matrix.platform }}"
        mkdir -p ~/.wails
        cp wails.json ~/.wails/
        wails build
      if: matrix.platform == 'ubuntu-latest'
    - name: Build package windows
      run: |
        $GP = (go env GOPATH)
        $env:path = "$env:path;$GP\bin"
        echo "building on ${{ matrix.platform }}"
        New-Item -ItemType directory -Path "$HOME\.wails" -Force
        Copy-Item -Path "$PWD\wails.json" -Destination "$HOME\.wails\wails.json"
        choco install mingw
        wails build -p
      if: matrix.platform == 'windows-latest'
    - name: upload artifact osx
      uses: actions/upload-artifact@v1
      with:
        name: portfall-osx
        path: Portfall.dmg
      if: matrix.platform == 'macos-latest'
    - name: upload artifact linux
      uses: actions/upload-artifact@v1
      with:
        name: portfall-linux
        path: Portfall
      if: matrix.platform == 'ubuntu-latest'
    - name: upload artifact windows
      uses: actions/upload-artifact@v1
      with:
        name: portfall-windows
        path: Portfall.exe
      if: matrix.platform == 'windows-latest'

  release:
    runs-on: ubuntu-latest
    needs: package
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Download osx package
      uses: actions/download-artifact@v1
      with:
        name: portfall-osx
    - name: Upload OSX package to release
      id: upload-osx-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./portfall-osx/Portfall.dmg
        asset_name: Portfall.dmg
        asset_content_type: application/octet-stream
    - name: Download linux package
      uses: actions/download-artifact@v1
      with:
        name: portfall-linux
    - name: Upload Linux package to release
      id: upload-linux-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./portfall-linux/Portfall
        asset_name: Portfall
        asset_content_type: application/octet-stream
    - name: Download windows package
      uses: actions/download-artifact@v1
      with:
        name: portfall-windows
    - name: Upload Windows package to release
      id: upload-windows-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./portfall-windows/Portfall.exe
        asset_name: Portfall.exe
        asset_content_type: application/octet-stream

#  snapify:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out Git repository
#        uses: actions/checkout@v2
#      - name: Install Snapcraft
#        uses: samuelmeuli/action-snapcraft@v1
#        with:
#          snapcraft_token: ${{ secrets.snapcraft_token }}
#          use_lxd: true
#      - name: Build snap
#        run: snapcraft --use-lxd
#      - name: Release snap
#        run: snapcraft push --release=stable portfall_*.snap